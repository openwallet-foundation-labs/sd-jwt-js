import { digest } from './crypto.spec';
import { bytesToHex } from '@noble/hashes/utils';
import { sha256 } from '../sha256';

describe('SHA-256 tests', () => {
  test('test#1', async () => {
    const payload = 'test1';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#2', async () => {
    const payload = 'email@email.com';
    const s1 = bytesToHex(await digest(payload));
    const ss1 = bytesToHex(await digest(s1));
    const s2 = bytesToHex(sha256(payload));
    const ss2 = bytesToHex(sha256(s2));
    expect(ss1).toStrictEqual(ss2);
  });

  test('test#3', async () => {
    const payload = '„Åì„Çì„Å´„Å°„ÅØ';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#4', async () => {
    const payload = '–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#5', async () => {
    const payload = 'üßë‚Äçüíªüë©‚Äçüíª';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#6', async () => {
    const payload = 'ŸÖÿ±ÿ≠ÿ®ÿß';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#7', async () => {
    const payload = '◊©◊ú◊ï◊ù';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#8', async () => {
    const payload = '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#9', async () => {
    const payload = '‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#10', async () => {
    const payload = 'ŒìŒµŒπŒ¨ œÉŒøœÖ';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#11', async () => {
    const payload = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#12', async () => {
    const payload = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#13', async () => {
    const payload = '·à∞·àã·àù';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });

  test('test#14', async () => {
    const payload = '‘≤’°÷Ä’•÷Ç ’Å’•’¶';
    const s1 = bytesToHex(await digest(payload));
    const s2 = bytesToHex(sha256(payload));
    expect(s1).toStrictEqual(s2);
  });
});
